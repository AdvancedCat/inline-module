(()=>{var d=window["inline-module-loaders"],l=document.currentScript||document.querySelector("script"),a={imports:{},scopes:{}},f=new Set;function y(t){return btoa(unescape(encodeURIComponent(t)))}function g(t){let n=new XMLHttpRequest;if(n.open("GET",t,!1),n.send(null),n.status===200)return n.responseText;throw new Error(n.statusText)}function S(t,n){let r=/^(\s*import\s+[\s\S]*?from\s*['"`])([\s\S]*?)(['"`])/img;return t.replace(r,(s,i,e,o)=>{let c=n[e];return c?`${i}${c}${o}`:`${i}${e}${o}`})}function b(t,n=!1,r={}){let s=t.textContent;if(t.hasAttribute("src")){let e=t.getAttribute("src");s=g(e),t.textContent=s}n&&(s=S(s,r));let i=t.getAttribute("loader");return i&&(i=i.split(/\s*>\s*/),s=i.reduce((e,o)=>{let{transform:c,imports:p}=d[o],{code:u,map:m}=c(e,{sourceMap:!0,filename:t.getAttribute("name")||t.id||"anonymous"});return m?e=`${u}

//# sourceMappingURL=data:application/json;base64,${y(JSON.stringify(m))}`:e=u,Object.assign(r.imports,p),e},s)),$(s,"text/javascript")}function $(t,n="text/plain"){let r=new Blob([t],{type:n});return URL.createObjectURL(r)}function w(){let t=document.querySelectorAll('script[type="inline-module"]'),n={},r=[],s=document.querySelector('script[type="importmap"]');s&&console.warn('Cannot update importmap after  <script type="importmap"> is set. Please use <script type="inline-module-importmap"> instead.'),[...t].forEach(e=>{let{id:o}=e,c=e.getAttribute("name"),p=b(e,!!s,n);o&&(n[`#${o}`]=p,n[`inline://#${o}`]=p),c&&(n[c]=p,n[`inline://${c}`]=p),r.push(p)});let i=document.querySelector('script[type="inline-module-importmap"]');if(i){let e=JSON.parse(i.textContent);Object.assign(a.imports,e.imports),Object.assign(a.scopes,e.scopes)}if(Object.assign(a.imports,n),!s){let e=document.createElement("script");e.setAttribute("type","importmap"),e.textContent=JSON.stringify(a),l.after(e)}r.forEach(e=>{if(!f.has(e)){let o=document.createElement("script");o.async=!1,o.setAttribute("type","module"),o.setAttribute("src",e),l.after(o),f.add(e)}})}l.getAttribute("setup")!=="false"&&w();window.inlineImport=async t=>{let{imports:n}=a,r=null;if(t in n)r=n[t];else{let s;/^#/.test(t)&&(s=document.querySelector(`script[type="inline-module"]${t}`)),s||(s=document.querySelector(`script[type="inline-module"][name="${t}"]`)),s&&(r=b(s),n[t]=r)}return r?await import(r):null};})();
